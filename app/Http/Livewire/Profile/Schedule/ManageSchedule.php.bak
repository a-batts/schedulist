  /**
   * Process time values on update to ensure they are properly formatted
   * @param  string $arrayName
   * @return array
   */
  public function fixTime($updatedTime, $oldArray, $newArray) {
    $data = $newArray[substr($updatedTime, strpos($updatedTime, 'pd'))];

    if ($data == null) {
      $newArray[substr($updatedTime, strpos($updatedTime, 'pd'))] = null;
      $oldArray[substr($updatedTime, strpos($updatedTime, 'pd'))] = null;
      return ["old" => $oldArray, "new" => $newArray];
    }
    if (strlen($data) == 1 && $data < 10 && is_numeric($data)) {
      $data = $data . ':00 ' . Carbon::now()->format('A');
    } elseif (strlen($data) == 2 && $data < 13 && is_numeric($data)) {
      $data = $data . ':00 ' . Carbon::now()->format('A');
    } elseif (strlen($data) == 2 && $data > 12 && $data < 24 && is_numeric($data)) {
      $data -= 12;
      $data = $data . ':00 PM';
    } elseif (strlen($data) == 2 && $data == 24 && is_numeric($data)) {
      $data -= 12;
      $data = $data . ':00 AM';
    }
    if (strpos($data, ':') == 2 && substr($data, 0, 2) > 12 && substr($data, 0, 2) < 24) {
      $data = substr($data, 0, 2) % 12 . substr($data, 2, 4) . ' PM';
    } else if (strpos($data, ':') == 2 && substr($data, 0, 2) == 24) {
      $data = '12:00 AM';
    }
    if (substr($data, 0, 2) > 24) {
      if (!isset($oldArray[substr($updatedTime, strpos($updatedTime, 'pd'))]))
        $oldArray[substr($updatedTime, strpos($updatedTime, 'pd'))] = Carbon::now()->format('g:i A');
      $newArrays[substr($updatedTime, strpos($updatedTime, 'pd'))] = $oldArray[substr($updatedTime, strpos($updatedTime, 'pd'))];

      return ["old" => $oldArray, "new" => $newArray];
    }
    if (substr($data, strpos($data, ':') + 1) > 60) {
      if (!isset($oldArray[substr($updatedTime, strpos($updatedTime, 'pd'))]))
        $oldArray[substr($updatedTime, strpos($updatedTime, 'pd'))] = Carbon::now()->format('g:i A');
      $newArray[substr($updatedTime, strpos($updatedTime, 'pd'))] = $oldArray[substr($updatedTime, strpos($updatedTime, 'pd'))];

      return ["old" => $oldArray, "new" => $newArray];
    }
    if (!str_contains(strtolower($data), 'am') && !str_contains(strtolower($data), 'pm'))
      $data = substr($data, 0, strpos($data, ':') + 3) . ' ' . Carbon::now()->format('A');
    if (!str_contains($data, ':') && str_contains($data, '00'))
      $data = substr($data, 0, strpos($data, '00')) . ":" . substr($data, strpos($data, '00'));
    elseif (!str_contains($data, ':')) {
      if (!isset($oldArray[substr($updatedTime, strpos($updatedTime, 'pd'))]))
        $oldArray[substr($updatedTime, strpos($updatedTime, 'pd'))] = Carbon::now()->format('g:i A');
      $newArray[substr($updatedTime, strpos($updatedTime, 'pd'))] = $oldArray[substr($updatedTime, strpos($updatedTime, 'pd'))];

      return ["old" => $oldArray, "new" => $newArray];
    }
    $newArray[substr($updatedTime, strpos($updatedTime, 'pd'))] = $data;
    $oldArray[substr($updatedTime, strpos($updatedTime, 'pd'))] = $data;

    return ["old" => $oldArray, "new" => $newArray];
  }
  /**
   * Saves fixed style schedule
   * @return void
   */
  public function saveFixedSchedule() {
    $schedule = ClassTime::where('user_id', Auth::user()->id)->first();
    if ($schedule == null)
      $schedule = new ClassTime;
    $schedule->type = "user";
    $schedule->user_id = Auth::User()->id;
    $schedule->block1 = null;
    $schedule->block2 = null;
    $schedule->block3 = null;
    $schedule->block4 = null;
    $schedule->block5 = null;
    $schedule->number_of_classes = $this->numberClasses;

    $schedule->schedule_type = "normal";
    $startTimes = [];
    $endTimes = [];
    foreach ($this->customTimes as $key => $item) {
      if ($item == null);
      elseif (str_contains($key, 'start'))
        array_push($startTimes, Carbon::create($item)->format('Hi'));
      elseif (str_contains($key, 'end'))
        array_push($endTimes, Carbon::create($item)->format('Hi'));
    }

    $schedule->number_of_classes = $this->numberClasses;
    $schedule->fixed_start_times = implode(',', $startTimes);
    $schedule->fixed_end_times = implode(',', $endTimes);
    $schedule->Monday = implode(',', $this->customFixedDays['M']);
    $schedule->Tuesday = implode(',', $this->customFixedDays['T']);
    $schedule->Wednesday = implode(',', $this->customFixedDays['W']);
    $schedule->Thursday = implode(',', $this->customFixedDays['Th']);
    $schedule->Friday = implode(',', $this->customFixedDays['F']);
    $schedule->save();

    $this->emit('toastMessage', 'Schedule was successfully saved');

    $newSchedule = ClassTime::where('user_id', Auth::user()->id)->first();
    $user = Auth::User();
    $user->schedule_id = $newSchedule->id;
    $user->save();

    $this->schedule = ClassTime::where('id', Auth::user()->schedule_id)->first();
    $this->mount();
  }

  public function saveBlockSchedule() {
    $schedule = ClassTime::where('user_id', Auth::user()->id)->first();
    if ($schedule == null) {
      $schedule = new ClassTime;
    }
    $schedule->type = "user";
    $schedule->user_id = Auth::User()->id;
    $schedule->schedule_type = "block";
    $schedule->fixed_start_times = null;
    $schedule->fixed_end_times = null;
    $schedule->Monday = null;
    $schedule->Tuesday = null;
    $schedule->Wednesday = null;
    $schedule->Thursday = null;
    $schedule->Friday = null;

    $schedule->number_of_blocks = $this->numberOfBlockDays;
    $schedule->number_of_classes = $this->numberClasses;
    $schedule->starting_block = $this->startingBlock;
    $schedule->starting_date = Carbon::now()->startOfWeek(Carbon::MONDAY)->toDateString();
    $schedule->block_style = $this->blockStyle;
    $startTimes = [
      "1" => [],
      "2" => [],
      "3" => [],
      "4" => [],
      "5" => []
    ];
    $endTimes = [
      "1" => [],
      "2" => [],
      "3" => [],
      "4" => [],
      "5" => []
    ];
    $setTimes = $this->customTimes;
    for ($i = 1; $i <= $this->numberOfBlockDays; $i++) {
      foreach ($this->customBlockDays[$i] as $item) {
        array_push($startTimes[$i], Carbon::create($this->customTimes['pd' . $item . 'start'])->format('Hi'));
        array_push($endTimes[$i], Carbon::create($this->customTimes['pd' . $item . 'end'])->format('Hi'));
      }
    }
    $schedule->block1 = implode(',', $this->customBlockDays[1]);
    $schedule->block1_start = implode(',', $startTimes[1]);
    $schedule->block1_end = implode(',', $endTimes[1]);

    $schedule->block2 = implode(',', $this->customBlockDays[2]);
    $schedule->block2_start = implode(',', $startTimes[2]);
    $schedule->block2_end = implode(',', $endTimes[2]);

    $schedule->block3 = implode(',', $this->customBlockDays[3]);
    $schedule->block3_start = implode(',', $startTimes[3]);
    $schedule->block3_end = implode(',', $endTimes[3]);

    $schedule->block4 = implode(',', $this->customBlockDays[4]);
    $schedule->block4_start = implode(',', $startTimes[4]);
    $schedule->block4_end = implode(',', $endTimes[4]);

    $schedule->block5 = implode(',', $this->customBlockDays[5]);
    $schedule->block5_start = implode(',', $startTimes[5]);
    $schedule->block5_end = implode(',', $endTimes[5]);

    $schedule->save();
    $this->emit('toastMessage', 'Schedule was successfully saved');

    $newSchedule = ClassTime::where('user_id', Auth::user()->id)->first();
    $user = Auth::User();
    $user->schedule_id = $newSchedule->id;
    $user->save();

    $this->schedule = ClassTime::where('id', Auth::user()->schedule_id)->first();
    $this->mount();
  }